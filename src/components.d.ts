/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface RiButton {
        "disabled": boolean;
        "label": string;
        "size": string;
        "type": string;
    }
    interface RiDropdown {
        "label": string;
        "name": string;
        "values": string[];
    }
    interface RiInput {
        "autocomplete": string;
        "label": string;
        "maxlength": string | number;
        "minlength": string | number;
        "name": string;
        "placeholder": string;
        "type": string;
    }
}
export interface RiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRiButtonElement;
}
export interface RiDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRiDropdownElement;
}
export interface RiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRiInputElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLRiButtonElement extends Components.RiButton, HTMLStencilElement {
    }
    var HTMLRiButtonElement: {
        prototype: HTMLRiButtonElement;
        new (): HTMLRiButtonElement;
    };
    interface HTMLRiDropdownElement extends Components.RiDropdown, HTMLStencilElement {
    }
    var HTMLRiDropdownElement: {
        prototype: HTMLRiDropdownElement;
        new (): HTMLRiDropdownElement;
    };
    interface HTMLRiInputElement extends Components.RiInput, HTMLStencilElement {
    }
    var HTMLRiInputElement: {
        prototype: HTMLRiInputElement;
        new (): HTMLRiInputElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "ri-button": HTMLRiButtonElement;
        "ri-dropdown": HTMLRiDropdownElement;
        "ri-input": HTMLRiInputElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface RiButton {
        "disabled"?: boolean;
        "label": string;
        "onClickEmitter"?: (event: RiButtonCustomEvent<any>) => void;
        "size"?: string;
        "type"?: string;
    }
    interface RiDropdown {
        "label"?: string;
        "name"?: string;
        "onChangeEmitter"?: (event: RiDropdownCustomEvent<any>) => void;
        "values"?: string[];
    }
    interface RiInput {
        "autocomplete"?: string;
        "label"?: string;
        "maxlength"?: string | number;
        "minlength"?: string | number;
        "name"?: string;
        "onInputEmitter"?: (event: RiInputCustomEvent<any>) => void;
        "placeholder"?: string;
        "type"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "ri-button": RiButton;
        "ri-dropdown": RiDropdown;
        "ri-input": RiInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "ri-button": LocalJSX.RiButton & JSXBase.HTMLAttributes<HTMLRiButtonElement>;
            "ri-dropdown": LocalJSX.RiDropdown & JSXBase.HTMLAttributes<HTMLRiDropdownElement>;
            "ri-input": LocalJSX.RiInput & JSXBase.HTMLAttributes<HTMLRiInputElement>;
        }
    }
}
